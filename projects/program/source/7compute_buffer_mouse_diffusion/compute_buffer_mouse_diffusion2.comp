#version 450 core
layout(local_size_x =   5, local_size_y =   5, local_size_z =   5) in;
layout (binding = 0)                    uniform sampler2D initialField;
layout (binding = 1, rgba32f) writeonly uniform image2D   outputField;


/* 
    Single iteration of a jacobi solver
*/
vec4 modified_jacobi_solver_velocity(
    in ivec2 ij,
    in float alpha,
    in float inverseBeta,
    in sampler2D x,
    in vec2      b
);


uniform float ku_dt;
uniform float ku_viscosity;
uniform ivec2 ku_simdims;
vec2 k_unitCoord = vec2(1) / vec2(ku_simdims); 


void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);


    float alpha = 1.0f / (ku_viscosity * ku_dt);
    float beta  = alpha + 4;
    vec4  result = modified_jacobi_solver_velocity(texelCoord,
        alpha, 
        1.0f / beta, 
        initialField,
        texelFetch(initialField, texelCoord, 0).xy
    );
    imageStore(outputField, texelCoord, result);
    return;
}


vec4 modified_jacobi_solver_velocity(
    in ivec2 ij,
    in float alpha,
    in float inverseBeta,
    in sampler2D x,
    in vec2      b
) {
    vec4 neighbourValues[4] = vec4[4](
        texelFetch(x, ij + ivec2(1, 0), 0),
        texelFetch(x, ij - ivec2(1, 0), 0),
        texelFetch(x, ij + ivec2(0, 1), 0),
        texelFetch(x, ij - ivec2(0, 1), 0)
    );
    vec4 result = vec4(0.0f);
    result += neighbourValues[0] + neighbourValues[1] + neighbourValues[2] + neighbourValues[3];
    result.xy += alpha * b; /* .zw components are [pressure, reserved_space], so no need to track them */
    result *= inverseBeta;
    result.zw = vec2(0.0f);
    return result;
}
