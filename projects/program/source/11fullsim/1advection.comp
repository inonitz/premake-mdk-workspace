#version 450 core
layout(local_size_x =   5, local_size_y =   5, local_size_z =   5) in;
layout (binding = 0)                    uniform sampler2D initialField;
layout (binding = 1, rgba32f) writeonly uniform image2D   outputField;


vec4 textureBiLerp(in sampler2D tex, in vec2 uv);
vec4 textureBiLerpNew(in sampler2D tex, in vec2 position);
vec4 textureBilinear(
    in sampler2D tex,
    in vec2      uv_norm
);
vec4 advection_step(
    in ivec2     coord,
    in vec2      normcoord, 
    in sampler2D ufield, 
    in sampler2D quantity_read
);


uniform float ku_dt;
uniform ivec2 ku_simdims;
vec2 k_unitCoord = vec2(1) / vec2(ku_simdims); 


void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec4  result = advection_step(
        texelCoord,
        k_unitCoord * vec2(texelCoord),
        initialField,
        initialField
    );
    imageStore(outputField, texelCoord, result);
    return;
}



/* 
    There is something wrong with the advection shader,
    little 'line' artifacts - maybe it has to do with texture offsets
*/
vec4 advection_step(
    in ivec2     coord,
    in vec2      normcoord, 
    in sampler2D ufield, 
    in sampler2D quantity_read
) {
    vec2 newcoord = normcoord - ku_dt * texelFetch(ufield, coord, 0).xy;
    // return textureBiLerp(quantity_read, newcoord);
    return textureBiLerp(quantity_read, newcoord);
}




vec4 textureBiLerp(in sampler2D tex, in vec2 uv) {
    vec2 texBufferCoord = uv * vec2(ku_simdims);
    vec2 texelCoord = floor(texBufferCoord);
    vec2 weight = texBufferCoord - texelCoord;

    vec4 bottom = mix(
        texelFetch(tex, ivec2(texelCoord) + ivec2(0, 0), 0), 
        texelFetch(tex, ivec2(texelCoord) + ivec2(1, 0), 0),
        weight.x
    );
    vec4 top    = mix(
        texelFetch(tex, ivec2(texelCoord) + ivec2(0, 1), 0), 
        texelFetch(tex, ivec2(texelCoord) + ivec2(1, 1), 0),
        weight.x
    );
    return mix(bottom, top, weight.y);
}


vec4 textureBiLerpNew(in sampler2D tex, in vec2 position) {
    vec2 texelCoord = floor(position);
    vec2 weight = position - texelCoord;

    vec4 bottom = mix(
        texelFetch(tex, ivec2(texelCoord) + ivec2(0, 0), 0), 
        texelFetch(tex, ivec2(texelCoord) + ivec2(1, 0), 0),
        weight.x
    );
    vec4 top    = mix(
        texelFetch(tex, ivec2(texelCoord) + ivec2(0, 1), 0), 
        texelFetch(tex, ivec2(texelCoord) + ivec2(1, 1), 0),
        weight.x
    );
    return mix(bottom, top, weight.y);
}



vec4 textureBilinear(
    in sampler2D tex,
    in vec2      uv_norm
) {
    vec2 uv_bufferidx  = uv_norm * ku_simdims;
    ivec2 integerPart  = ivec2( int(uv_bufferidx.x), int(uv_bufferidx.y));
    vec2 fractionPart  = uv_bufferidx - vec2(integerPart);
    vec4 sampleValues[4] = vec4[4](
        texture(tex, vec2(integerPart + ivec2(0, 0)) * k_unitCoord),
        texture(tex, vec2(integerPart + ivec2(1, 0)) * k_unitCoord),
        texture(tex, vec2(integerPart + ivec2(1, 1)) * k_unitCoord),
        texture(tex, vec2(integerPart + ivec2(0, 1)) * k_unitCoord)
    );
    vec4 mixXdir = mix(sampleValues[0], sampleValues[1], fractionPart.x);
    vec4 mixYdir = mix(sampleValues[2], sampleValues[3], fractionPart.x);
    return mix(mixXdir, mixYdir, fractionPart.y);
}


vec4 bilerp(sampler2D sam, vec2 uv, vec2 tsize) {
    vec2 st = uv / tsize - 0.5;
    vec2 iuv = floor(st);
    vec2 fuv = fract(st);
    vec4 a = texture(sam, (iuv + vec2(0.5, 0.5)) * tsize);
    vec4 b = texture(sam, (iuv + vec2(1.5, 0.5)) * tsize);
    vec4 c = texture(sam, (iuv + vec2(0.5, 1.5)) * tsize);
    vec4 d = texture(sam, (iuv + vec2(1.5, 1.5)) * tsize);
    return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);
}