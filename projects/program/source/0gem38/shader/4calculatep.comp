#version 450 core
layout(local_size_x =   5, local_size_y =   5, local_size_z =   5) in;
layout (binding = 0) uniform sampler2D sim_w_p_divw;
layout (binding = 1) writeonly uniform image2D sim_output;


bvec4 isBoundary(ivec2 coords);


float modified_jacobi_solver_pressure(
    in ivec2 ij,
    in float alpha,
    in float inverseBeta,
    in sampler2D x,
    in float     b
);


uniform float ku_dt;
uniform float ku_viscosity;
uniform ivec2 ku_simdims;

vec2 k_unitCoord = vec2(1) / vec2(ku_simdims); 


void main()
{
    ivec2 texelCoord    = ivec2(gl_GlobalInvocationID.xy);
    vec2  norm_texcoord = vec2(texelCoord) * k_unitCoord;
    float u_alpha_param = 1.0f / (ku_viscosity * ku_dt);
    float u_beta_param  = u_alpha_param + 4;
    vec4  sim_wpdivw_ij = texelFetch(sim_w_p_divw, texelCoord, 0);

    if(any(isBoundary(texelCoord)))
        return;
    

    float newpressure = modified_jacobi_solver_pressure(texelCoord, 
        u_alpha_param, 
        1.0f / u_beta_param, 
        sim_w_p_divw,
        sim_wpdivw_ij.w
    );
    sim_wpdivw_ij.z = newpressure;
    imageStore(sim_output, texelCoord, sim_wpdivw_ij);
    return;
}


bvec4 isBoundary(ivec2 coords) {
    return bvec4(
        coords.x == 0, 
        coords.y == 0,
        coords.x == (ku_simdims.x - 1),
        coords.y == (ku_simdims.y - 1)
    );
}


float modified_jacobi_solver_pressure(
    in ivec2 ij,
    in float alpha,
    in float inverseBeta,
    in sampler2D x,
    in float     b
) {
    vec4 neighbourValues = vec4(
        texture(x, ij + ivec2(1, 0)).z,
        texture(x, ij - ivec2(1, 0)).z,
        texture(x, ij + ivec2(0, 1)).z,
        texture(x, ij - ivec2(0, 1)).z
    );
    float result = 0.0f;
    result += neighbourValues.x + neighbourValues.y + neighbourValues.z + neighbourValues.w;
    result += alpha * b;
    result *= inverseBeta;
    return result;
}
