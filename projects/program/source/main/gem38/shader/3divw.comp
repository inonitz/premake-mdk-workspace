#version 450 core
layout(local_size_x =   5, local_size_y =   5, local_size_z =   5) in;
layout (binding = 0) uniform sampler2D sim_fieldw;
layout (binding = 1) writeonly uniform image2D sim_output;


bvec4 isBoundary(ivec2 coords);


float FieldDivergence(
    in ivec2     texCoord,
    in vec2      dxdyvec,
    in sampler2D toread
);




uniform ivec2 ku_simdims;
vec2 k_unitCoord = vec2(1) / vec2(ku_simdims); 


void main()
{
    ivec2 texelCoord    = ivec2(gl_GlobalInvocationID.xy);
    vec2  norm_texcoord = vec2(texelCoord) * k_unitCoord;

    float div = FieldDivergence(texelCoord, vec2(1.0f), sim_fieldw);
    vec4 valij = texelFetch(sim_fieldw, texelCoord, 0);
    valij.w = div; /* format now is [ w.x, w.y, p, div(w) ] */
    imageStore(sim_output, texelCoord, valij);
    return;
}




bvec4 isBoundary(ivec2 coords) {
    return bvec4(
        coords.x == 0, 
        coords.y == 0,
        coords.x == (ku_simdims.x - 1),
        coords.y == (ku_simdims.y - 1)
    );
}


float FieldDivergence(
    in ivec2     texCoord,
    in vec2      dxdy,
    in sampler2D toread
) {
    float result;
    

    dxdy = 0.5f / dxdy;
    vec4 neighbourValues = vec4(
        texelFetch(toread, texCoord + ivec2(1, 0), 0).x,
        texelFetch(toread, texCoord - ivec2(1, 0), 0).x,
        texelFetch(toread, texCoord + ivec2(0, 1), 0).y,
        texelFetch(toread, texCoord - ivec2(0, 1), 0).y
    );


    result  = (neighbourValues[0] - neighbourValues[1]) * dxdy.x;
    result += (neighbourValues[2] - neighbourValues[3]) * dxdy.y;
    return result;
}   