#version 450 core
layout(local_size_x =   5, local_size_y =   5, local_size_z =   5) in;
layout (binding = 0) uniform sampler2D sim_w_p;
layout (binding = 1) writeonly uniform image2D sim_output;


bvec4 isBoundary(ivec2 coords);


vec2 pressureGradient(
    in ivec2     texCoord,
    in vec2      dxdy,
    in sampler2D toread
);




uniform ivec2 ku_simdims;
vec2 k_unitCoord = vec2(1) / vec2(ku_simdims); 


void main()
{
    ivec2 texelCoord    = ivec2(gl_GlobalInvocationID.xy);
    vec2  norm_texcoord = vec2(texelCoord) * k_unitCoord;
    vec4  w_p           = texelFetch(sim_w_p, texelCoord, 0);

    if(any(isBoundary(texelCoord)))
        return;
        

    w_p.xy -= pressureGradient(texelCoord, vec2(1), sim_w_p);
    imageStore(sim_output, texelCoord, w_p);
    return;
}




bvec4 isBoundary(ivec2 coords) {
    return bvec4(
        coords.x == 0, 
        coords.y == 0,
        coords.x == (ku_simdims.x - 1),
        coords.y == (ku_simdims.y - 1)
    );
}


vec2 pressureGradient(
    in ivec2     texCoord,
    in vec2      dxdy,
    in sampler2D toread
) {
    dxdy = 0.5f / dxdy;
    vec4 neighbourValues = vec4(
        texture(toread, vec2( texCoord + ivec2(1, 0) ) * k_unitCoord).z,
        texture(toread, vec2( texCoord - ivec2(1, 0) ) * k_unitCoord).z,
        texture(toread, vec2( texCoord + ivec2(0, 1) ) * k_unitCoord).z,
        texture(toread, vec2( texCoord - ivec2(0, 1) ) * k_unitCoord).z
    );


    return vec2(
        (neighbourValues[0] - neighbourValues[1]) * dxdy.x,
        (neighbourValues[2] - neighbourValues[3]) * dxdy.y
    );
}  